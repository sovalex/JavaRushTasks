<div class="wdghtml" taskKey="com.javarush.task.task36.task3608.big09">
<h3>MVC (9)</h3>
<p>Это последнее задание по <strong>MVC</strong>.</p>
<p>1. Следуя принципу <strong>MVC</strong> аналогично реализации предыдущих методов сделай следующее:<br />
напиши логику обновления пользователя. После обновления должен отображаться список пользователей.</p>
<p>Распредели методы по классам <strong>MVC</strong>, используя следующие сигнатуры публичных методов:<br />
<span class="text-neon">void fireEventUserChanged(String name, long id, int level)</span><br />
<span class="text-neon"> void onUserChange(String name, long id, int level)</span><br />
<span class="text-neon"> void changeUserData(String name, long id, int level)</span></p>
<p>где <strong>name</strong> и <strong>level</strong> &#8212; это новые значения для пользователя с выбранным <strong>id</strong>.</p>
<p><strong>Примечание:</strong> <em>метод, который ты собираешься добавить в Вью нужно добавить в</em> <strong><span class="text-yellow">EditUserView</span></strong>.</p>
<p>2. Добавь в <mark>main</mark> вызов <mark>fireEventUserChanged</mark> перед вызовом метода <mark>fireEventShowDeletedUsers()</mark>.</p>
<p>3. Добавь в интерфейс <strong><span class="text-yellow">Model</span></strong> метод, который ты поместил в Модель, реализуй его в <strong><span class="text-yellow">FakeModel</span></strong>: выброси <strong><span class="text-corporate">UnsupportedOperationException</span></strong>.</p>

<hr>
<h3>MVC (8)</h3>
<p>1. Следуя принципу <strong>MVC</strong> аналогично реализации предыдущих методов сделай следующее:<br />
напиши логику удаления пользователя. После удаления должен отображаться список пользователей.</p>
<p>Распредели методы по классам <strong>MVC</strong>, используя следующие сигнатуры публичных методов:<br />
<span class="text-neon">void fireEventUserDeleted(long id)</span><br />
<span class="text-neon"> void onUserDelete(long id)</span><br />
<span class="text-neon"> void deleteUserById(long id)</span></p>
<p><strong>Примечание:</strong> <em>метод, который ты собираешься добавить в Вью нужно добавить в </em><span class="text-yellow"><strong>EditUserView</strong></span><em>.</em></p>
<p>2. Добавь в <mark>main</mark> вызов <mark>fireEventUserDeleted(<strong>124L</strong>)</mark> перед вызовом метода <mark>fireEventShowDeletedUsers()</mark>.</p>
<p>3. Выполни рефакторинг класса <span class="text-corporate"><strong>MainModel</strong></span>. Теперь, когда есть удаленные пользователи, часть методов стала работать неправильно.<br />
Почти во всех методах, где требуется список пользователей, нужно работать только с активными(живыми) пользователями.<br />
Вынеси в отдельный приватный метод<span class="text-red"><strong> List</strong>&lt;User&gt;</span> <mark>getAllUsers()</mark> получение списка всех пользователей.<br />
Фильтрация активных пользователей у тебя уже есть &#8212; метод <span class="text-red"><strong>List</strong>&lt;User&gt;</span> <mark>filterOnlyActiveUsers(List&lt;User&gt; <strong>allUsers</strong>)</mark>.<br />
Отрефактори все методы, которые используют список пользователей. Они должны использовать список живых пользователей.</p>
<p>4. Добавь в интерфейс <strong><span class="text-yellow">Model</span></strong> метод, который ты поместил в Модель, реализуй его в <strong><span class="text-yellow">FakeModel</span></strong>: выброси <strong><span class="text-corporate">UnsupportedOperationException</span></strong>.</p>

<hr>
<h3>MVC (7)</h3>
<p>1. Распредели методы по классам <strong>MVC</strong>:</p>
<p><span class="text-neon">public void onOpenUserEditForm(long userId) {</span><br />
<span class="text-neon"> &#8230;loadUserById(userId);</span><br />
<span class="text-neon"> &#8230;refresh(&#8230;getModelData());</span><br />
<span class="text-neon"> }</span></p>
<p><span class="text-neon">public void fireEventOpenUserEditForm(long id) {</span><br />
<span class="text-neon"> &#8230;onOpenUserEditForm(id);</span><br />
<span class="text-neon"> }</span></p>
<p><span class="text-neon">public void loadUserById(long userId) {</span><br />
<span class="text-neon"> User user = userService.getUsersById(userId);</span><br />
<span class="text-neon"> &#8230;setActiveUser(user);</span><br />
<span class="text-neon"> }</span></p>
<p>!!!! Пользователь видит Вью со списком пользователей, нажимает на одного из них, запрос идет на сервер, выгребаем новые данные и отображаем другую Вью, которая относится к одному выбранному пользователю.<br />
Учти это при реализации этого задания.</p>
<p>2. Добавь в метод <mark>main</mark> открытие формы редактирования для пользователя с <mark class="user">id</mark><strong>=<span class="text-user">126</span></strong> перед вызовом метода <mark class="user">fireEventShowDeletedUsers()</mark>.</p>
<p>3. Добавь в интерфейс <mark>Model</mark> метод, который ты поместил в Модель, реализуй его в <strong><span class="text-yellow">FakeModel</span></strong>: выброси <strong><span class="text-corporate">UnsupportedOperationException</span></strong>.</p>

<hr>
<h3>MVC (6)</h3>
<p>Функционал отображения удаленных пользователей есть, а самих таких пользователей нет. Давай это исправим.<br />
Давай сделаем новую Вью, которая будет отвечать за редактирование одного конкретного пользователя.<br />
<strong><span class="text-yellow">UsersView</span></strong> отображает список пользователей.<br />
<strong><span class="text-yellow">EditUserView</span></strong> будет отображать данные о редактировании конкретного пользователя.<br />
Для этого нам сначала нужен этот выбранный пользователь.<br />
Как и любые данные его поместим в <span class="text-yellow"><strong>ModelData</strong></span>.</p>
<p>1. Создай в <strong><span class="text-yellow">ModelData</span></strong> поле <span class="text-corporate">User</span> <mark class="user">activeUser</mark> с геттером и сеттером (<span class="text-neon">Alt+Insert -&gt; Getter and Setter</span>).</p>
<p>2. Аналогично <strong><span class="text-yellow">UsersView</span></strong> создай <strong><span class="text-yellow">EditUserView</span></strong>.<br />
Логика метода <mark>refresh</mark>:<br />
2.1. Вывести в консоль &#171;<em><strong>User to be edited:</strong></em>&#171;.<br />
2.2. С новой строки вывести табуляцию и активного пользователя.<br />
2.3. С новой строки вывести разделитель &#171;===================================================&#187;.</p>
<p>3. Создай в контроллере поле <span class="text-corporate">EditUserView</span> <mark class="user">editUserView</mark> с сеттером.</p>
<p>Когда наши данные выводятся в консоль, то совсем не понятно, список каких пользователей &#8212; удаленных или нет &#8212; выводится.<br />
Давай сделаем так, чтобы Вью отображала эту информацию. Все данные для отображения хранятся в Моделе.</p>
<p><strong>Поэтому:</strong><br />
4. создай в <strong><span class="text-yellow">ModelData</span></strong> поле <mark>boolean displayDeletedUserList</mark> с <strong>геттером</strong> и <strong>сеттером</strong>.</p>
<p>5. Измени метод <mark>refresh</mark> в <strong><span class="text-yellow">UsersView</span></strong> так, чтобы он отображал &#171;<em><strong>All users:</strong></em>&#187; либо &#171;<em><strong>All deleted users:</strong></em>&#187;<br />
в зависимости от того, какие пользователи находятся в списке.<br />
Добавь в необходимые методы модели изменение <strong><span class="text-yellow">displayDeletedUserList</span></strong>.</p>

<hr>
<h3>MVC (5)</h3>
<p>В сервисе есть метод, который возвращает всех удаленных пользователей. Давай их отобразим.</p>
<p>1. Распредели методы по классам <strong>MVC</strong>:</p>
<p><span class="text-neon">public void fireEventShowDeletedUsers() {</span><br />
<span class="text-neon"> &#8230;onShowAllDeletedUsers();</span><br />
<span class="text-neon"> }</span></p>
<p><span class="text-neon">public void onShowAllDeletedUsers() {</span><br />
<span class="text-neon"> &#8230;loadDeletedUsers();</span><br />
<span class="text-neon"> }</span></p>
<p><span class="text-neon">public void loadDeletedUsers() {</span><br />
<span class="text-neon"> List&lt;User&gt; users = userService.getAllDeletedUsers();</span><br />
<span class="text-neon"> }</span></p>
<p>Не забудь, что данные, полученные с сервера, необходимо положить в <strong><span class="text-yellow">ModelData</span></strong>. А потом обновить <mark class="green">view</mark>.<br />
Добавь это самостоятельно в нужные методы.</p>
<p>2. Добавь в <strong>Solution.main</strong> вызов нового метода, который ты поместил в <mark class="green">view</mark>.</p>
<p>3. Добавь в интерфейс <span class="text-red">Model</span> метод, который ты поместил в <strong>Модель</strong>, реализуй его в <span class="text-yellow"><strong>FakeModel</strong></span>: выброси <mark class="user">UnsupportedOperationException</mark>.</p>

<hr>
<h3>MVC (4)</h3>
<p>Пора заменять нашу фейковую Модель на реальную, которая будет получать данные из <strong><span class="text-corporate">DataSource</span></strong>.<br />
В пакет <strong><span class="text-red">model.service</span></strong> я добавил сервис для работы с пользователями.<br />
Также в корне этой задачи ты найдешь утильный класс <span class="text-corporate"><strong>Util</strong></span>.</p>
<p>1. Аналогично <strong><span class="text-yellow">FakeModel</span></strong> создай модель <span class="text-yellow"><strong>MainModel</strong></span>.</p>
<p>2. Т.к. Модель обращается к сервисам, то в <strong><span class="text-yellow">MainModel</span></strong> создай поле <mark class="user">UserService</mark> <span class="text-corporate">userService</span>, инициализируй объектом.</p>
<p>3. Реализуй логику метода <mark>loadUsers</mark>:<br />
3.1. Достань всех пользователей между <span class="text-user"><strong>1</strong></span> и <span class="text-user"><strong>100</strong></span> уровнями. (Метод <mark>getUsersBetweenLevels(1, 100)</mark>).<br />
3.2. Положи всех пользователей в <strong><span class="text-yellow">modelData</span></strong>.</p>
<p>4. Обнови <strong>Solution.main</strong>: замени <strong><span class="text-yellow">FakeModel</span></strong> на <span class="text-yellow"><strong>MainModel</strong></span>.<br />
Преимущества <strong>MVC</strong> в том, что в любой момент времени легко можно заменить любую часть паттерна.</p>

<hr>
<h3>MVC (3)</h3>
<p>Чтобы понимать, в правильном ли направлении ты движешься, тебе надо видеть данные. Поэтому:</p>
<p>1. В пакете view создай класс UsersView, реализующий View. Он будет отображать список пользователей в консоль.</p>
<p></p>
<p>2. В UsersView создай поле-контроллер, также создай ему сеттер.</p>
<p></p>
<p>3. Реализуй логику метода refresh:</p>
<p>3.1. Выведи в консоль фразу &quot;All users:&quot;.</p>
<p>3.2. Выведи в консоль всех пользователей, которые есть в modelData.</p>
<p>Перед каждым пользователем сделай отступ в виде табуляции.</p>
<p>3.3. В конце выведи визуальный разделитель данных</p>
<p>==================================================</p>
<p></p>
<p>4. Уже интересно посмотреть, что же получилось.</p>
<p>Добавь в UsersView публичный метод void fireEventShowAllUsers(), который будет эмулировать событие клиента.</p>
<p>Обратись к контроллеру и вызови его нужный метод для отображения всех пользователей.</p>
<p></p>
<p>5. Класс Solution будет эмулятором пользователя. Открой класс Solution, стань на красный метод,</p>
<p>с помощью горячих клавиш Идеи создай проперти(поле) для usersView.</p>
<p>Нужен только сеттер. Если у тебя создался геттер, то удали его.</p>
<p></p>
<p>6. Запусти main. Упс, ничего не вывело :(</p>
<p>Это получилось потому, что данные пришли с сервера, обновились в ModelData, но Вью ничего о них не знает.</p>
<p>Вью сама не умеет себя обновлять. Это делает Контроллер.</p>
<p>Пойди в контроллер и добавь обновление данных во Вью.</p>
<p>Напомню, данные хранятся в Модели.</p>
<p></p>
<p>7. Запусти main. У меня теперь такой вывод:</p>
<p>All users:</p>
<p>User{name='A', id=1, level=1}</p>
<p>User{name='B', id=2, level=1}</p>
<p>==================================================</p>
<p>Ура, идем дальше.</p>

<hr>
<h3>MVC (2)</h3>
<p>1. Создай пакет <strong><span class="text-red">controller</span></strong>, в котором создай класс <span class="text-corporate"><strong>Controller</strong></span>.<br />
Этот класс будет получать запрос от клиента, оповещать Модель об этом, а Модель, в свою очередь, будет обновлять <strong><span class="text-red">ModelData</span></strong>.</p>
<p>2. Добавь в контроллер поле <mark class="user">Model</mark> <span class="text-corporate">model</span> вместе с сеттером.</p>
<p>3. В контроллере создай публичный метод <mark>void onShowAllUsers()</mark>, который должен обратиться к модели и инициировать загрузку пользователей.</p>
<p>4. Создай пакет <strong><span class="text-red">view</span></strong>. В нем создай интерфейс <strong><span class="text-yellow">View</span></strong>.</p>
<p>5. В интерфейс <span class="text-yellow"><strong>View</strong></span> добавь два метода: <mark>void refresh(ModelData modelData)</mark> и <mark>void setController(Controller controller)</mark></p>

<hr>
<h3>MVC (1)</h3>
<p>Привет! Эта задача будет на паттерн <strong>MVC</strong> &#8212; <strong>Model-View-Controller</strong>.<br />
Мы вместе построим архитектуру используя <strong>MVC</strong>. Разберись подробно, что и почему нужно реализовывать так, как я тебе покажу.<br />
Прочти дополнительную литературу, которую дает профессор в конце уровня.<br />
Тебя, скорее всего, на собеседовании спросят об этом паттерне либо дадут задание, в котором нужно будет его реализовать.</p>
<p>Итак&#8230;<br />
У тебя есть два пакета: bean, содержащий единственный класс <strong><span class="text-corporate">User</span></strong>, и <span class="text-corporate"><strong>dao</strong></span>,<br />
в котором хранится эмуляция базы данных в пакете <strong><span class="text-red">mock</span></strong> и <strong><span class="text-red">UserDao</span></strong>. <strong><span class="text-red">UserDao</span></strong> &#8212; это уровень <strong>ДАО</strong>, т.е. уровень доступа к базе.<br />
В нем размещают различные методы по <strong>сохранению</strong> и <strong>получению</strong> объектов из базы данных.<br />
В реальном приложении строку <span class="text-neon">private DataSource dataSource = DataSource.getInstance()</span> не встретить.<br />
Я реализовал <strong>DataSource</strong> в виде синглтона. В действительности, у тебя будет что-то такое:<br />
<span class="text-neon">@Autowired</span><br />
<span class="text-neon"> private DataSource dataSource;</span></p>
<p>Фреймворк, которым ты будешь пользоваться, сам создаст объект базы данных и инициализирует поле <mark class="user">dataSource</mark>.</p>
<p>Запомни, с <strong>ДАО</strong> уровнем работают сервисы. Никакие другие классы в <strong>ДАО</strong> не лезут. В сервисах описана бизнес логика.<br />
Сервисы забирают данные из базы используя <strong>ДАО</strong>, обрабатывают их и отдают тому, кто данные запросил.<br />
Однако не все данные хранятся в базе. Например, залогиненый пользователь будет храниться в специальном объекте &#8212; Модели.<br />
Объект, который содержит в себе данные, необходимые для отображения информации на клиенте, называется Моделью.<br />
Также этот объект Модель содержит ссылки на все необходимые сервисы.<br />
Если данных для отображения очень много, то их выделяют в отдельный объект.</p>
<p>Напишем приложение, которое будет показывать список пользователей и что-то делать с ними, например, обновлять их данные и удалять.</p>
<p>1. Создай пакет <strong><span class="text-red">model</span></strong>, в котором создай класс <span class="text-corporate"><strong>ModelData</strong></span>.<br />
<span class="text-corporate"><strong>ModelData</strong></span> &#8212; это объект, который будет хранить необходимые данные для отображения на клиенте.<br />
Создай поле с геттером и сеттером <span class="text-red"><strong>List</strong>&lt;User&gt; users</span> &#8212; это будет список пользователей для отображения.</p>
<p>2. Используя любую модель должна быть возможность получить все необходимые данные для отображения. Поэтому в пакете <strong><span class="text-red">model</span></strong> создай интерфейс <strong><span class="text-yellow">Model</span></strong>, который должен содержать метод <mark>ModelData getModelData()</mark>.</p>
<p>3. В пакете model создай класс <strong><span class="text-corporate">FakeModel</span></strong>, реализующий <strong><span class="text-yellow">Model</span></strong>. Он нам понадобится на начальном этапе.<br />
В нем создай поле <span class="text-corporate"><strong>ModelData</strong></span> <span class="text-corporate">modelData</span>, которое инициализируй объектом.</p>
<p>4. В интерфейсе <strong><span class="text-yellow">Model</span></strong> создай метод <mark>void loadUsers()</mark>.<br />
Реализуй его в <mark>FakeModel</mark>: инициализируй список пользователей <strong><span class="text-red">modelData</span></strong> любыми данными. Они не влияют на тестирование.</p>
<p><strong>У меня такие данные:</strong><br />
<span class="text-neon">User{name=&#8217;A&#8217;, id=1, level=1}</span><br />
<span class="text-neon"> User{name=&#8217;B&#8217;, id=2, level=1}</span></p>
<p>Думаю, ты помнишь, что все методы интерфейса являются <strong>public</strong>-ами, поэтому модификатор указывать не нужно.<br />
Программисты часто мОкают данные на начальном этапе. Получение реальных данных реализуется на последних этапах.<br />
<mark class="neon">Мокать</mark> &#8212; это подменять реальные объекты на хардкоженные, тестовые данные.</p>

</div>
