<div class="wdghtml" taskKey="com.javarush.task.task29.task2909.big15">
<h3>Рефакторинг (15)</h3>
<p><strong>Отлично</strong>. Ты освоил основные методы рефакторинга: <em>Подъем поля, Подъем метода,</em><br />
<em> Инкапсуляция коллекции, Извлечение подкласса, Подъем тела конструктора, Спуск</em><br />
<em> метода, Спуск поля, Извлечение интерфейса, Свертывание иерархии, Замена наследования</em><br />
<em> делегированием, Извлечение суперкласса, Замена простого поля объектом, Создание</em><br />
<em> шаблонного метода, Замена делегирования наследованием, Переименование метода,</em><br />
<em> Замена параметра набором специализированных методов, Добавление параметра,</em><br />
<em> Удаление параметра, Разделение запроса и модификатора, Параметризация метода,</em><br />
<em> Передача всего объекта, Замена параметра вызовом метода, Замена параметров</em><br />
<em> объектом, Удаление сеттера, Сокрытие метода, Замена исключения проверкой условия,</em><br />
<em> Удаление управляющего флага, Самоинкапсуляция поля, Замена поля-массива объектом,</em><br />
<em> Инкапсуляция поля, Замена кодирования типа классом, Замена конструктора фабричным</em><br />
<em> методом, Замена кода ошибки исключением, Разбиение условного оператора,</em><br />
<em> Объединение условных операторов, Объединение дублирующихся фрагментов в условных</em><br />
<em> операторах, Замена магического числа символьной константой, Замена условного</em><br />
<em> оператора полиморфизмом, Извлечение метода, Встраивание метода, Перемещение</em><br />
<em> метода, Расщепление переменной, Удаление присваиваний параметрам, Перемещение</em><br />
<em> поля, Извлечение класса, Встраивание класса и Сокрытие делегирования</em>.</p>
<p>Конечно есть еще и другие, обязательно ознакомься и с ними. Очень важно не только<br />
уметь применять <strong>методы</strong> <strong>рефакторинга</strong>, но и <strong>видеть</strong> <strong>места</strong>, где их <strong>нужно</strong> <strong>применить</strong>. По<br />
мере возрастания опыта, такие места будет все проще и проще находить. Мартин Фаулер в<br />
своей книге &#171;Р<em><strong>ефакторинг: Улучшение существующего кода</strong></em>&#187; называет такие места &#171;<em><strong>код с</strong></em><br />
<em><strong> душком</strong></em>&#171;. Обязательно прочитай про основные варианты &#171;<em><strong>кода с душком</strong></em>&#171;. Желаю, чтобы<br />
твой код пах хорошо!</p>

<hr>
<h3>Рефакторинг (14)</h3>
<p>14.1. Перемещение поля. Замени поля <mark class="user">isManAnya</mark> и <mark class="user">isManRoma</mark> полем man в нужном классе.<br />
Добавь <strong>сеттер</strong> и <strong>геттер</strong> для нового поля (<em>при выборе имен методов учти тип поля</em>).<br />
14.2. Извлечение класса.<br />
14.2.1. Добавь класс <strong><span class="text-corporate">Address</span></strong> в пакет <strong><span class="text-red">user</span></strong>.<br />
14.2.2. Перенеси поля <mark class="user">country</mark>, <mark class="user">city</mark> и <mark class="user">house</mark> в новый класс.<br />
14.2.3. Добавь <strong>сеттеры</strong> и <strong>геттеры</strong> для них.<br />
14.2.4. Перепиши класс <strong><span class="text-corporate">User</span></strong>, используя поле класса <strong><span class="text-corporate">Address</span></strong> <mark class="user">address</mark>.<br />
14.3. Встраивание класса. Класс <strong><span class="text-corporate">House</span></strong> почти ничего не делает, избавься от него.<br />
14.4. Сокрытие делегирования.<br />
14.4.1. Добавь в класс <strong><span class="text-corporate">User</span></strong> метод <mark>getBoss()</mark>.<br />
14.4.2. Перепиши реализацию метода <mark>getBossName(User <strong>user</strong>)</mark> класса <span class="text-corporate"><strong>UserHelper</strong></span>.</p>

<hr>
<h3>Рефакторинг (13)</h3>
<p>Разберись с кодом пакета <strong><span class="text-red">user</span></strong> (<em>пользователь</em>).<br />
13.1. Извлечение метода. Добавь метод <mark>printInfo()</mark>, который будет выводить <strong>имя</strong> и <strong>фамилию</strong><br />
в консоль так же, как это делается в методе <mark>printUsers()</mark>. Замени повторяющийся код<br />
метода <mark>printUsers()</mark> его вызовом.<br />
13.2. Встраивание метода. Избавься от метода <mark>ageLessThan16()</mark>.<br />
13.3. Перемещение метода. Перемести методы <mark>printInfo()</mark> и <mark>printAdditionalInfo()</mark> в класс <span class="text-corporate"><strong>User</strong></span>.<br />
13.4. Расщепление переменной. Переменная age в методе <mark>calculateAverageAge() </mark>используется для разных промежуточных значений. Перепиши метод без использования этой переменной.<br />
13.5. Удаление присваиваний параметрам. Перепиши метод <mark>calculateRate()</mark>, чтобы он не<br />
пытался менять входные параметры, а просто возвращал рассчитанное значение.</p>

<hr>
<h3>Рефакторинг (12)</h3>
<p>12.1. Объединение условных операторов.<br />
12.1.1. Добавь внутренний метод, сообщающий, могут ли быть перевезены пассажиры<br />
<mark>boolean canPassengersBeTransferred()</mark> в класс <span class="text-corporate"><strong>Car</strong></span>. Метод должен возвращать <span class="text-neon"><strong>true</strong></span>, если<br />
водитель доступен <mark>isDriverAvailable</mark> и есть топливо <mark class="user">fuel</mark>.<br />
12.1.2. Перепиши метод <mark>getNumberOfPassengersCanBeTransferred()</mark>, объединив условные<br />
операторы (<em>используй метод</em> <mark>canPassengersBeTransferred()</mark>).<br />
12.2. Объединение дублирующихся фрагментов в условных операторах. Перепиши метод<br />
<mark>startMoving()</mark>, чтобы в нем не было повторяющихся вызовов функций.<br />
12.3. Замена магического числа символьной константой. Замени магические числа в методе<br />
<mark>getMaxSpeed()</mark> на константные переменные метода: <mark class="green">MAX_TRUCK_SPEED</mark>,<br />
<mark class="green">MAX_SEDAN_SPEED</mark> и <mark class="green">MAX_CABRIOLET_SPEED</mark>.<br />
12.4. Замена условного оператора полиморфизмом.<br />
12.4.1. Переопредели метод <mark>getMaxSpeed()</mark> в подклассах, избавившись от условного оператора.<br />
12.4.2. Метод <mark>getMaxSpeed()</mark> в классе <span class="text-corporate"><strong>Car</strong></span> сделай абстрактным.</p>

<hr>
<h3>Рефакторинг (11)</h3>
<p>11.1. Замена кода ошибки исключением. Перепиши метод заправиться <mark>fill(double</mark><br />
<mark><strong> numberOfLiters</strong>)</mark>, чтобы он в случае ошибки кидал исключение <mark class="green">Exception</mark>.<br />
11.2. Разбиение условного оператора.<br />
11.2.1. Добавь и реализуй метод в классе <strong><span class="text-corporate">Car</span></strong>, определяющий относится ли переданная дата к<br />
лету: <mark>boolean isSummer(Date <strong>date</strong> , Date <strong>summerStart</strong>, Date <strong>summerEnd</strong>)</mark>.<br />
11.2.2. Добавь и реализуй метод, рассчитывающий расход топлива зимой: <mark>double</mark><br />
<mark> getWinterConsumption(int <strong>length</strong>)</mark>.<br />
11.2.3. Добавь и реализуй метод, рассчитывающий расход топлива летом: <mark>double</mark><br />
<mark> getSummerConsumption(int <strong>length</strong>)</mark>.<br />
11.2.4. Перепиши метод <mark>getTripConsumption()</mark>, используя новые методы.</p>

<hr>
<h3>Рефакторинг (10)</h3>
<p>Разберись с кодом в пакете <strong><span class="text-red">car</span></strong> (<em><strong>машина</strong></em>).<br />
10.1. Замена конструктора фабричным методом.<br />
10.1.1. Объяви классы <strong><span class="text-corporate">Truck</span></strong> (<strong>грузовик</strong>), <strong><span class="text-corporate">Sedan</span></strong> (<strong>седан</strong>) и <span class="text-corporate"><strong>Cabriolet</strong></span> (<strong>кабриолет</strong>), унаследованные от <strong><span class="text-corporate">Car</span></strong>.<br />
10.1.2. Добавь в них конструкторы, принимающие <mark>int numberOfPassengers</mark>.<br />
10.1.3. Добавь фабричный статический метод <mark>Car create(int type, int <strong>numberOfPassengers</strong>)</mark> в класс <strong><span class="text-corporate">Car</span></strong> и реализуй его.<br />
10.1.4. Измени область видимости конструктора класса <span class="text-corporate"><strong>Car</strong></span>.</p>

<hr>
<h3>Рефакторинг (9)</h3>
<p>9.1. Самоинкапсуляция поля. Перепиши метод <mark>incAverageGrade()</mark> используя <strong>сеттер</strong> и <strong>геттер</strong> для доступа к <mark class="green">averageGrade</mark>.<br />
9.2. Замена поля-массива объектом. Замени массив <mark class="user">int[] size</mark> объектом нового типа <strong><span class="text-corporate">Size</span></strong>,<br />
содержащим публичные поля: рост <span class="text-corporate">int</span> <mark class="user">height</mark> и вес <span class="text-corporate">int</span> <mark class="user">weight</mark>. Публичный класс <strong><span class="text-corporate">Size</span></strong> объяви<br />
внутри класса <strong><span class="text-corporate">Human</span></strong>.<br />
9.3. Инкапсуляция поля. Сокрой поле company в классе <strong><span class="text-corporate">Worker</span></strong>. Добавь <strong>сеттер</strong> и <strong>геттер</strong> для него.<br />
9.4. Замена кодирования типа классом.<br />
9.4.1. Объяви публичный класс группы крови <strong><span class="text-corporate">BloodGroup</span></strong> внутри пакета <strong><span class="text-red">human</span></strong>.<br />
9.4.2. Добавь в класс <strong><span class="text-corporate">BloodGroup</span></strong> приватное константное поле <span class="text-corporate">int</span> <mark class="user">code</mark>, приватный конструктор,<br />
принимающий <span class="text-corporate">int</span> и инициализирующий поле <mark class="user">code</mark>, <strong>геттер</strong> для поля класса.<br />
9.4.3. Добавь в класс <strong><span class="text-corporate">BloodGroup</span></strong> статические методы <mark>first()</mark>, <mark>second()</mark>, <mark>third()</mark> и <mark>fourth()</mark>,<br />
создающие и возвращающие объекты типа BloodGroup с правильным кодом внутри (<strong>1</strong>, <strong>2</strong>, <strong>3</strong> и <strong>4</strong> соответственно).<br />
9.4.4. Примени в классе <span class="text-corporate"><strong>Human</strong></span> новый тип <strong><span class="text-corporate">BloodGroup</span></strong>.</p>

<hr>
<h3>Рефакторинг (8)</h3>
<p>8.1. Удаление сеттера. Удали метод <mark>setId()</mark>. Поле <mark class="user">id</mark> должно устанавливаться только в момент<br />
создания объекта.<br />
8.2. Сокрытие метода (<em><strong>поля</strong></em>). Изменить область видимости поля <mark class="user">nextId</mark> в соответствии с<br />
областью его использования.<br />
8.3. Замена исключения проверкой условия. Перепиши метод <mark>removeStudent(int <strong>index</strong>)</mark>, чтобы<br />
он удалял студента из списка студентов только, если он там есть. Метод не должен кидать<br />
исключение.<br />
8.4. Удаление управляющего флага. Перепиши метод <mark>findDimaOrSasha()</mark>, сохранив логику его<br />
работы. В методе не должны использоваться флаги типа <span class="text-corporate">found</span>, воспользуйся оператором<br />
<mark>break</mark>.</p>

<hr>
<h3>Рефакторинг (7)</h3>
<p>7.1. Параметризация метода. Замени методы <mark>incAverageGradeBy01()</mark> и <mark>incAverageGradeBy02()</mark><br />
одним методом <mark>incAverageGrade(double <strong>delta</strong>)</mark>.<br />
7.2. Передача всего объекта. Перепиши метод <mark>addInfoAboutStudent()</mark>, чтобы он в качестве<br />
параметра принимал объект типа <strong><span class="text-corporate">Student</span></strong>.<br />
7.3. Замена параметра вызовом метода. Перепиши метод <mark>printInfoAboutStudent()</mark>, чтобы он не<br />
требовал в качестве параметра имя студента, а получал его, вызвав соответствующий<br />
метод у переданного объекта.<br />
7.4. Замена параметров объектом. Перепиши методы <mark>setBeginningOfSession</mark> и <mark>setEndOfSession</mark>,<br />
чтобы они вместо набора параметров принимали по одному объекту даты.</p>

<hr>
<h3>Рефакторинг (6)</h3>
<p>6.1. Замена параметра набором специализированных методов. Замени метод <mark>setValue()</mark> класса<br />
<span class="text-corporate"><strong>Student</strong></span> специализированными методами <mark>setCourse</mark> и <mark>setAverageGrade</mark>.<br />
6.2. Добавление параметра. Добавить параметр с типом <span class="text-corporate">double</span> в метод <mark>getStudentWithAverageGrade()</mark>, чтобы было понятно с каким средним балом нужен студент.<br />
Реализуй метод <mark>getStudentWithAverageGrade()</mark>.<br />
6.3. Удаление параметра. Убери параметр из метода <mark>getStudentWithMaxAverageGrade()</mark>.<br />
Реализуй этот метод, он должен возвращать студента с максимальным средним балом.<br />
6.4. Разделение запроса и модификатора. Раздели метод <mark>getStudentWithMinAverageGradeAndExpel</mark> на <mark>Student getStudentWithMinAverageGrade()</mark> и <mark>void expel(Student <strong>student</strong>)</mark>. Первый метод должен возвратить студента с минимальным средним балом, а второй &#8212; отчислить переданного студента (<em>удалять из списка</em> <strong><span class="text-red">students</span></strong>).</p>

<hr>
<h3>Рефакторинг (5)</h3>
<p>5.1. Создание шаблонного метода.<br />
5.1.1. Добавь в класс <strong><span class="text-corporate">Human</span></strong> метод <mark>String getPosition()</mark>, который должен возвращать строку &#171;<em><strong>Человек</strong></em>&#171;.<br />
5.1.2. Переопредели этот метод в классе <strong><span class="text-corporate">Student</span></strong> и <span class="text-corporate"><strong>Teacher</strong></span>. Метод должен возвращать &#171;<em><strong>Студент</strong></em>&#187; и &#171;<em><strong>Преподаватель</strong></em>&#187; соответственно.<br />
5.1.3. Замени метод <mark>printData</mark> в подклассах шаблонным методом в базовом классе, использующим <mark>getPosition()</mark>.<br />
5.2. Замена делегирования наследованием. Класс <strong><span class="text-corporate">Worker</span></strong> должен наследоваться от <strong><span class="text-corporate">Human</span></strong>, а не содержать его.<br />
5.3. Переименование метода. Переименуй метод <mark>setSlr</mark>, чтобы было понятно сеттером чего является этот метод.</p>

<hr>
<h3>Рефакторинг (4)</h3>
<p>4.1. Замена наследования делегированием.<br />
4.1.1. Класс <span class="text-corporate"><strong>University</strong></span> не должен наследоваться от <strong><span class="text-corporate">Student</span></strong>.<br />
4.1.2. Класс <span class="text-corporate"><strong>University</strong></span> должен содержать список <strong><span class="text-red">students</span></strong>. Не забудь его инициализировать.<br />
4.1.3. Добавь <strong>сеттер</strong> и <strong>геттер</strong> для <span class="text-red"><strong>students</strong></span>.<br />
4.1.4. Университет имеет название (<mark class="user">name</mark>) и возраст (<mark class="user">age</mark>). Добавь необходимые поля, сеттеры и геттеры для них.<br />
4.2. Извлечение суперкласса.<br />
4.2.1. Создай класс <strong><span class="text-corporate">UniversityPerson</span></strong> в пакете <strong><span class="text-red">human</span></strong>.<br />
4.2.2. Перенеси в него поле <mark class="user">university</mark>.<br />
4.2.3. Перенеси <strong>сеттер</strong> и <strong>геттер</strong> для поля <mark class="user">university</mark>.<br />
4.2.4. Унаследуй необходимые классы от <strong><span class="text-corporate">UniversityPerson</span></strong>.<br />
4.3. Замена простого поля объектом. Измени тип поля <mark class="user">university</mark> на <span class="text-corporate"><strong>University</strong></span>.</p>

<hr>
<h3>Рефакторинг (3)</h3>
<p>3.1. Спуск поля. Спусти поле <mark class="user">course</mark> в соответствующий класс. Сделай его <strong>приватным</strong>.<br />
3.2. Спуск метода. Спусти <strong>геттер</strong> для поля <mark class="user">course</mark> в соответствующий класс.<br />
3.3. Извлечение интерфейса.<br />
3.3.1. Создай интерфейс <strong><span class="text-yellow">Alive</span></strong> (<strong>живой</strong>) в пакете <strong><span class="text-red">human</span></strong>.<br />
3.3.2. Интерфейс должен содержать метод жить <mark>live()</mark>.<br />
3.3.3. Добавь интерфейс нужному классу.<br />
3.4. Свертывание иерархии. Избавься от класса <strong><span class="text-corporate">Professor</span></strong>.</p>

<hr>
<h3>Рефакторинг (2)</h3>
<p>2.1. Извлечение подкласса.<br />
2.1.1. Добавь класс <strong><span class="text-corporate">Soldier</span></strong> в пакет <strong><span class="text-red">human</span></strong>.<br />
2.1.2. Избавься от поля <mark class="user">isSoldier</mark>.<br />
2.1.3. Перенеси в <strong><span class="text-corporate">Soldier</span></strong> необходимые методы из <mark><strong>Human</strong></mark>.<br />
2.1.4. Обнови сигнатуру конструктора <mark><strong>Human</strong></mark>.<br />
2.2. Подъем тела конструктора.<br />
2.2.1. Перенеси инициализацию полей <mark class="user">name</mark> и <mark class="user">age</mark> в подходящее место, добавь необходимые параметры в конструктор <mark><strong>Human</strong></mark>.<br />
2.2.2. Добавь конструктор в класс <strong><span class="text-corporate">Soldier</span></strong>.</p>

<hr>
<h3>Рефакторинг (1)</h3>
<p>Пришло время немного порефакторить.<br />
<strong>Википедия говорит:</strong> &#171;<em><strong>Рефакторинг</strong> (англ. refactoring) или реорганизация кода &#8212; процесс изменения внутренней структуры программы, не затрагивающий её внешнего поведения и имеющий целью облегчить понимание её работы. В основе рефакторинга лежит последовательность небольших эквивалентных (то есть сохраняющих поведение) преобразований. Поскольку каждое преобразование маленькое, программисту легче проследить за его правильностью, и в то же время вся последовательность может привести к существенной перестройке программы и улучшению её согласованности и четкости.&#187; Такими маленькими преобразованиями мы и будем заниматься. После каждого изменения следи за сохранностью работоспособности кода. Многие методы рефакторинга не однократно применены и проверены сообществом программистов. Получили свои названия. Каждое задание будет сопровождено названием рефакторинга. Ты всегда можешь прочитать более подробно о нем в книге Мартина Фаулера &#171;<strong>Рефакторинг: Улучшение существующего кода</strong></em>&#171;.</p>
<p>Начнем. Внимательно ознакомься с кодом пакета <strong><span class="text-red">human</span></strong> (человек).</p>
<p><strong>Задания:</strong><br />
1.1. Подъем поля. Подними поле <mark class="user">children</mark> в базовый класс.<br />
1.2. Подъем метода. Подними <strong>сеттер</strong> и <strong>геттер</strong> для <mark class="user">children</mark> в базовый класс.<br />
1.3. Инкапсуляция коллекции.<br />
1.3.1. Метод <mark>getChildren</mark> должен возвращать не модифицируемое представление списка <mark class="user">children</mark>.<br />
1.3.2. Убери сеттер для <mark class="user">children</mark>.<br />
1.3.3. Добавь методы <mark>addChild(<strong>Human</strong>)</mark> и <mark>removeChild(<strong>Human</strong>)</mark>. Реализуй их логику.</p>

</div>
